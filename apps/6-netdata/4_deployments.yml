---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: netdata-slave
  namespace: netdata
  labels:
    app: netdata
    role: slave
spec:
  selector:
    matchLabels:
      app: netdata
      release: release-name
      role: slave
  template:
    metadata:
      annotations:
        container.apparmor.security.beta.kubernetes.io/netdata: unconfined
        checksum/config: 0e39217be1ccaf70c662137f3fbd8a6f03e6bcc8cab105e67e5e3db6bc857459
      labels:
        app: netdata
        release: release-name
        role: slave
    spec:
      serviceAccountName: netdata
      restartPolicy: Always
      hostPID: true
      hostIPC: true
      hostNetwork: true
      initContainers: null
      containers:
      - name: netdata
        image: netdata/netdata:v1.16.1
        imagePullPolicy: Always
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - python -c 'import uuid; import socket; print(uuid.uuid3(uuid.NAMESPACE_DNS, socket.gethostname()))' > /var/lib/netdata/registry/netdata.public.unique.id
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - killall netdata; while killall -0 netdata; do sleep 1; done
        ports:
        - name: http
          containerPort: 19999
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /api/v1/info
            port: http
          timeoutSeconds: 1
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/info
            port: http
          timeoutSeconds: 1
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: proc
          readOnly: true
          mountPath: /host/proc
        - name: run
          mountPath: /var/run/docker.sock
        - name: sys
          mountPath: /host/sys
        - name: config
          mountPath: /etc/netdata/go.d/coredns.conf
          subPath: coredns
        - name: config
          mountPath: /etc/netdata/go.d/k8s_kubelet.conf
          subPath: kubelet
        - name: config
          mountPath: /etc/netdata/go.d/k8s_kubeproxy.conf
          subPath: kubeproxy
        - name: config
          mountPath: /etc/netdata/netdata.conf
          subPath: netdata
        - name: config
          mountPath: /etc/netdata/stream.conf
          subPath: stream
        securityContext:
          capabilities:
            add:
            - SYS_PTRACE
            - SYS_ADMIN
        resources: {}
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: run
        hostPath:
          path: /var/run/docker.sock
      - name: sys
        hostPath:
          path: /sys
      - name: config
        configMap:
          name: netdata-conf-slave
      dnsPolicy: ClusterFirstWithHostNet
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: netdata-master
  namespace: netdata
  labels:
    app: netdata
    role: master
spec:
  serviceName: netdata
  replicas: 1
  volumeClaimTemplates:
  - metadata:
      name: database
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: grigri-dataset
      resources:
        requests:
          storage: 2Gi
  - metadata:
      name: alarms
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: grigri-dataset
      resources:
        requests:
          storage: 100Mi
  selector:
    matchLabels:
      app: netdata
      release: release-name
      role: master
  template:
    metadata:
      labels:
        app: netdata
        release: release-name
        role: master
      annotations:
        checksum/config: bd858509c0d3dc092aba2ec043e23668b43e460386a9417f27da08a528524be7
    spec:
      securityContext:
        fsGroup: 201
      serviceAccountName: netdata
      initContainers: null
      containers:
      - name: netdata
        image: netdata/netdata:v1.16.1
        imagePullPolicy: Always
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - killall netdata; while killall -0 netdata; do sleep 1; done
        ports:
        - name: http
          containerPort: 19999
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /api/v1/info
            port: http
          timeoutSeconds: 1
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/info
            port: http
          timeoutSeconds: 1
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /etc/netdata/health_alarm_notify.conf
          subPath: health
        - name: config
          mountPath: /etc/netdata/netdata.conf
          subPath: netdata
        - name: config
          mountPath: /etc/netdata/stream.conf
          subPath: stream
        - name: database
          mountPath: /var/cache/netdata
        - name: alarms
          mountPath: /var/lib/netdata
        resources: {}
      volumes:
      - name: config
        configMap:
          name: netdata-conf-master
